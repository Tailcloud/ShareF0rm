#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var colors = require("colors");
var path = require("path");
var _1 = require(".");
var version = require(path.join(__dirname, '..', 'package.json')).version;
program
    .version(version)
    .name('sp-auth')
    .usage('[command]')
    .description('Command line config options builder for node-sp-auth (SharePoint Authentication in Node.js)')
    .command('init')
    .description('writes new file with node-sp-auth credentials into the file system')
    .option('-p, --path [value]', 'relative path to file which will store your credentials, required')
    .option('-e, --encrypt [true, false]', 'specify false if you don\'t need to encrypt password in the file, optional, default is true', true)
    .action(function (options) {
    if (typeof options.path === 'undefined') {
        console.log(colors.red("'" + colors.bold('-p, --path') + "' parameter should be provided"), colors.gray("(relative path to file which will store your credentials)"));
        process.exit();
    }
    var extension = path.extname(options.path);
    if (extension !== '.json') {
        console.log(colors.red("'" + colors.bold('--path') + "' file extension should to be .json"));
        process.exit();
    }
    var authConfig = new _1.AuthConfig({
        configPath: options.path,
        encryptPassword: options.encrypt,
        saveConfigOnDisk: true,
        forcePrompts: true
    });
    authConfig.getContext()
        .then(function () {
        console.log('\n' + colors.green('File saved to') + ' ' +
            colors.cyan(path.resolve(options.path)));
    });
});
program.parse(process.argv);
if (program.args.length === 0) {
    program.help();
}

//# sourceMappingURL=cli.js.map
