"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var cpass_1 = require("cpass");
var spauth = require("node-sp-auth");
var utils_1 = require("./utils");
var siteUrl_1 = require("./wizards/siteUrl");
var chooseStrategy_1 = require("./wizards/chooseStrategy");
var askCredentials_1 = require("./wizards/askCredentials");
var saveOnDisk_1 = require("./wizards/saveOnDisk");
var config_1 = require("./config");
var cpass = new cpass_1.Cpass();
var AuthConfig = (function () {
    function AuthConfig(settings) {
        if (settings === void 0) { settings = {}; }
        var _this = this;
        this.getContext = function () {
            return new Promise(function (resolve, reject) {
                return _this.checkForPrompts()
                    .then(function (checkPromptsResponse) {
                    var authContext = __assign({}, checkPromptsResponse.authContext);
                    if (!checkPromptsResponse.needPrompts) {
                        if (checkPromptsResponse.needSave) {
                            utils_1.saveConfigOnDisk(authContext, _this.settings)
                                .then(function () {
                                resolve(authContext);
                            });
                        }
                        else {
                            resolve(authContext);
                        }
                    }
                    else {
                        return siteUrl_1.default(authContext, {}, _this.settings)
                            .then(function (answersResult) {
                            return chooseStrategy_1.default(authContext, answersResult, _this.settings);
                        })
                            .then(function (answersResult) {
                            return askCredentials_1.default(authContext, answersResult, _this.settings);
                        })
                            .then(function (answersResult) {
                            return saveOnDisk_1.default(authContext, answersResult, _this.settings);
                        })
                            .then(function (answersResult) {
                            return resolve(utils_1.convertSettingsToAuthContext(answersResult));
                        });
                    }
                });
            });
        };
        this.tryAuth = function (authContext) {
            return spauth.getAuth(authContext.siteUrl, authContext.authOptions);
        };
        this.checkForPrompts = function () {
            var getJsonContent = function (filePath, jsonData) {
                return new Promise(function (resolve, reject) {
                    if (typeof jsonData === 'undefined') {
                        fs.exists(filePath, function (exists) {
                            var jsonRawData = {};
                            if (exists) {
                                jsonRawData = require(path.resolve(filePath));
                            }
                            resolve({
                                exists: exists,
                                jsonRawData: jsonRawData
                            });
                        });
                    }
                    else {
                        resolve({
                            exists: true,
                            jsonRawData: jsonData
                        });
                    }
                });
            };
            var runCheckForPrompts = function (checkObject) {
                return new Promise(function (resolve, reject) {
                    getJsonContent(_this.settings.configPath, _this.settings.authOptions)
                        .then(function (check) {
                        checkObject.needPrompts = !check.exists;
                        checkObject.jsonRawData = check.jsonRawData;
                        return checkObject;
                    })
                        .then(function (checkObj) {
                        if (typeof _this.settings.defaultConfigPath !== 'undefined') {
                            return getJsonContent(_this.settings.defaultConfigPath)
                                .then(function (check) {
                                checkObj.jsonRawData = __assign({}, check.jsonRawData, checkObj.jsonRawData);
                                return checkObject;
                            });
                        }
                        else {
                            return checkObj;
                        }
                    })
                        .then(function (checkObj) {
                        _this.context = checkObj.jsonRawData;
                        var withPassword;
                        var strategies = _this.strategies.filter(function (strategy) {
                            return strategy.id === _this.context.strategy;
                        });
                        if (strategies.length === 1) {
                            withPassword = strategies[0].withPassword;
                        }
                        else {
                            withPassword = typeof _this.context.password !== 'undefined';
                        }
                        if (withPassword) {
                            var initialPassword = "" + (_this.context.password || '');
                            if (_this.context.password === '' || typeof _this.context.password === 'undefined') {
                                checkObj.needPrompts = true;
                            }
                            else {
                                _this.context.password = cpass.decode(_this.context.password);
                                var decodedPassword = _this.context.password;
                                var encodedPassword = cpass.encode(decodedPassword);
                                if (initialPassword === decodedPassword && _this.settings.encryptPassword && _this.settings.saveConfigOnDisk) {
                                    checkObj.needSave = true;
                                }
                            }
                        }
                        checkObj.authContext = utils_1.convertSettingsToAuthContext(_this.context);
                        if (_this.settings.forcePrompts === true) {
                            checkObj.needPrompts = true;
                        }
                        if (strategies.length === 1) {
                            if (!checkObj.needPrompts) {
                                checkObj.needPrompts = !strategies[0].verifyCallback(_this.context.siteUrl, _this.context);
                            }
                            resolve(checkObj);
                        }
                        else {
                            if (checkObj.needPrompts) {
                                resolve(checkObj);
                            }
                            else {
                                _this.tryAuth(checkObj.authContext)
                                    .then(function () {
                                    checkObj.needPrompts = false;
                                    resolve(checkObj);
                                })
                                    .catch(function (_error) {
                                    checkObj.needPrompts = true;
                                    resolve(checkObj);
                                });
                            }
                        }
                    });
                });
            };
            var checkPromptsObject = {
                needPrompts: true,
                needSave: false
            };
            return runCheckForPrompts(checkPromptsObject);
        };
        this.strategies = config_1.getStrategies();
        this.targets = config_1.getTargetsTypes();
        this.settings = __assign({}, settings, { configPath: path.resolve(settings.configPath || './config/private.json'), encryptPassword: typeof settings.encryptPassword !== 'undefined' ? settings.encryptPassword : true, saveConfigOnDisk: typeof settings.saveConfigOnDisk !== 'undefined' ? settings.saveConfigOnDisk : true });
        if (typeof this.settings.encryptPassword === 'string') {
            this.settings.encryptPassword = !(this.settings.encryptPassword.toLowerCase() === 'false');
        }
    }
    return AuthConfig;
}());
exports.AuthConfig = AuthConfig;

//# sourceMappingURL=index.js.map
