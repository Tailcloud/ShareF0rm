{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { Cpass } from 'cpass';\r\nimport * as spauth from 'node-sp-auth';\r\n\r\n// Utils\r\nimport { convertSettingsToAuthContext, saveConfigOnDisk } from './utils';\r\n\r\n// Step wizards\r\nimport siteUrlWizard from './wizards/siteUrl';\r\nimport strategyWizard from './wizards/chooseStrategy';\r\nimport credentialsWizard from './wizards/askCredentials';\r\nimport saveOnDiskWizard from './wizards/saveOnDisk';\r\n\r\nimport { getStrategies, getTargetsTypes } from './config';\r\n\r\n// Auth interfaces >>>\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { IAuthOptions, IAuthResponse } from 'node-sp-auth';\r\n// <<< Auth interfaces\r\n\r\nimport {\r\n  IAuthContext, IAuthContextSettings, IStrategyDictItem,\r\n  IAuthConfigSettings, ICheckPromptsResponse\r\n} from './interfaces';\r\n\r\nconst cpass = new Cpass();\r\n\r\nexport class AuthConfig {\r\n\r\n  private settings: IAuthConfigSettings;\r\n  private targets: string[];\r\n  private strategies: IStrategyDictItem[];\r\n  private context: IAuthContextSettings;\r\n\r\n  constructor (settings: IAuthConfigSettings = {}) {\r\n    this.strategies = getStrategies();\r\n    this.targets = getTargetsTypes();\r\n    this.settings = {\r\n      ...settings,\r\n      configPath: path.resolve(settings.configPath || './config/private.json'),\r\n      encryptPassword: typeof settings.encryptPassword !== 'undefined' ? settings.encryptPassword : true,\r\n      saveConfigOnDisk: typeof settings.saveConfigOnDisk !== 'undefined' ? settings.saveConfigOnDisk : true\r\n    };\r\n    if (typeof this.settings.encryptPassword === 'string') {\r\n      this.settings.encryptPassword = !((this.settings.encryptPassword as string).toLowerCase() === 'false');\r\n    }\r\n  }\r\n\r\n  public getContext = (): Promise<IAuthContext> => {\r\n    // console.log('Config path: ' + this.settings.configPath);\r\n    return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n      return this.checkForPrompts()\r\n        .then(checkPromptsResponse => {\r\n          let authContext: IAuthContext = {\r\n            ...checkPromptsResponse.authContext\r\n          };\r\n\r\n          if (!checkPromptsResponse.needPrompts) {\r\n\r\n            if (checkPromptsResponse.needSave) {\r\n              saveConfigOnDisk(authContext, this.settings)\r\n                .then(() => {\r\n                  resolve(authContext);\r\n                });\r\n            } else {\r\n              resolve(authContext);\r\n            }\r\n\r\n          } else {\r\n\r\n            // Step 1: Require SharePoint URL\r\n            return siteUrlWizard(authContext, {}, this.settings)\r\n              .then((answersResult) => {\r\n                // Step 2: SharePoint Online/OnPremise autodetection\r\n                return strategyWizard(authContext, answersResult, this.settings);\r\n              })\r\n              .then((answersResult) => {\r\n                // Step 3: Ask for strategy specific parameters\r\n                return credentialsWizard(authContext, answersResult, this.settings);\r\n              })\r\n              .then((answersResult) => {\r\n                // Step 4: Save on disk\r\n                return saveOnDiskWizard(authContext, answersResult, this.settings);\r\n              })\r\n              .then((answersResult) => {\r\n                // Return wizard data\r\n                return resolve(convertSettingsToAuthContext(answersResult as any));\r\n              });\r\n\r\n          }\r\n        });\r\n\r\n    });\r\n  }\r\n\r\n  private tryAuth = (authContext: IAuthContext): Promise<IAuthResponse> => {\r\n    return spauth.getAuth(authContext.siteUrl, authContext.authOptions) as any;\r\n  }\r\n\r\n  private checkForPrompts = (): Promise<ICheckPromptsResponse> => {\r\n    let getJsonContent = (filePath: string, jsonData?: IAuthOptions): Promise<any> => {\r\n      return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n        if (typeof jsonData === 'undefined') {\r\n          fs.exists(filePath, (exists: boolean) => {\r\n            let jsonRawData: any = {};\r\n            if (exists) {\r\n              jsonRawData = require(path.resolve(filePath));\r\n            }\r\n            resolve({\r\n              exists,\r\n              jsonRawData\r\n            });\r\n          });\r\n        } else {\r\n          resolve({\r\n            exists: true,\r\n            jsonRawData: jsonData\r\n          });\r\n        }\r\n      });\r\n    };\r\n    let runCheckForPrompts = (checkObject: ICheckPromptsResponse): Promise<ICheckPromptsResponse> => {\r\n      return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n        getJsonContent(this.settings.configPath, this.settings.authOptions)\r\n          .then(check => {\r\n            checkObject.needPrompts = !check.exists;\r\n            checkObject.jsonRawData = check.jsonRawData;\r\n            return checkObject;\r\n          })\r\n          .then(checkObj => {\r\n            if (typeof this.settings.defaultConfigPath !== 'undefined') {\r\n              return getJsonContent(this.settings.defaultConfigPath)\r\n                .then(check => {\r\n                  checkObj.jsonRawData = {\r\n                    ...check.jsonRawData,\r\n                    ...checkObj.jsonRawData\r\n                  };\r\n                  return checkObject;\r\n                });\r\n            } else {\r\n              return checkObj;\r\n            }\r\n          })\r\n          .then(checkObj => {\r\n\r\n            this.context = (checkObj.jsonRawData as IAuthContextSettings);\r\n\r\n            let withPassword: boolean;\r\n            let strategies = this.strategies.filter((strategy: IStrategyDictItem) => {\r\n              return strategy.id === this.context.strategy;\r\n            });\r\n            if (strategies.length === 1) {\r\n              withPassword = strategies[0].withPassword;\r\n            } else {\r\n              withPassword = typeof this.context.password !== 'undefined';\r\n            }\r\n\r\n            // Strategies with password\r\n            if (withPassword) {\r\n              let initialPassword = `${this.context.password || ''}`;\r\n              if (this.context.password === '' || typeof this.context.password === 'undefined') {\r\n                checkObj.needPrompts = true;\r\n              } else {\r\n                this.context.password = cpass.decode(this.context.password);\r\n                let decodedPassword = this.context.password;\r\n                let encodedPassword = cpass.encode(decodedPassword);\r\n                if (initialPassword === decodedPassword && this.settings.encryptPassword && this.settings.saveConfigOnDisk) {\r\n                  checkObj.needSave = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            checkObj.authContext = convertSettingsToAuthContext(this.context);\r\n\r\n            // Force prompts\r\n            if (this.settings.forcePrompts === true) {\r\n              checkObj.needPrompts = true;\r\n            }\r\n\r\n            // Verify strategy parameters\r\n            if (strategies.length === 1) {\r\n              if (!checkObj.needPrompts) {\r\n                checkObj.needPrompts = !strategies[0].verifyCallback(this.context.siteUrl, this.context);\r\n              }\r\n              resolve(checkObj);\r\n            } else {\r\n              // No strategies found\r\n              if (checkObj.needPrompts) {\r\n                resolve(checkObj);\r\n              } else {\r\n                this.tryAuth(checkObj.authContext)\r\n                  .then(() => {\r\n                    checkObj.needPrompts = false;\r\n                    resolve(checkObj);\r\n                  })\r\n                  .catch((_error: any) => {\r\n                    checkObj.needPrompts = true;\r\n                    resolve(checkObj);\r\n                  });\r\n              }\r\n            }\r\n          });\r\n      });\r\n    };\r\n    let checkPromptsObject: ICheckPromptsResponse = {\r\n      needPrompts: true,\r\n      needSave: false\r\n    };\r\n    return runCheckForPrompts(checkPromptsObject);\r\n  }\r\n\r\n}\r\n\r\nexport { IAuthContext, IAuthConfigSettings } from './interfaces';\r\nexport { IAuthOptions } from 'node-sp-auth';\r\n"]}