{"version":3,"sources":["wizards/askCredentials.ts"],"names":[],"mappings":";;AAKA,+DAAgE;AAChE,6DAA8D;AAC9D,2DAA4D;AAC5D,2DAA4D;AAC5D,yDAA0D;AAC1D,uDAAwD;AACxD,mDAAoD;AACpD,mDAAoD;AAGpD,IAAM,MAAM,GAAG,UAAC,WAAyB,EAAE,UAAiC,EAAE,QAAkC;IAArE,2BAAA,EAAA,eAAiC;IAAE,yBAAA,EAAA,aAAkC;IAC9G,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAA+B,EAAE,MAA6B;QAChF,IAAI,SAAS,GAAwB,EAAE,CAAC;QAGxC,SAAS,GAAG,EAAE,CAAC;QACf,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5B,KAAK,2BAA2B;gBAC9B,OAAO,CAAC,wBAAoB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACvD,KAAK,CAAC;YACR,KAAK,0BAA0B;gBAC7B,OAAO,CAAC,uBAAmB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACtD,KAAK,CAAC;YACR,KAAK,yBAAyB;gBAC5B,OAAO,CAAC,sBAAkB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACrD,KAAK,CAAC;YACR,KAAK,yBAAyB;gBAC5B,OAAO,CAAC,sBAAkB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACrD,KAAK,CAAC;YACR,KAAK,wBAAwB;gBAC3B,OAAO,CAAC,qBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACpD,KAAK,CAAC;YACR,KAAK,iBAAiB;gBACpB,OAAO,CAAC,oBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACnD,KAAK,CAAC;YACR,KAAK,qBAAqB;gBACxB,OAAO,CAAC,kBAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACjD,KAAK,CAAC;YACR,KAAK,qBAAqB;gBACxB,OAAO,CAAC,kBAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACjD,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,UAAU,CAAC,CAAC;gBACpB,KAAK,CAAC;QACV,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"askCredentials.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IAuthContext, IAuthConfigSettings } from '../interfaces';\r\n\r\n// Strategies wizards >>>\r\nimport onPremiseAddinWizard from './credentials/OnPremiseAddin';\r\nimport onPremiseUserWizard from './credentials/OnPremiseUser';\r\nimport onPremiseTmgWizard from './credentials/OnPremiseTmg';\r\nimport onPremiseFbaWizard from './credentials/OnPremiseFba';\r\nimport onlineAddinWizard from './credentials/OnlineAddin';\r\nimport onlineUserWizard from './credentials/OnlineUser';\r\nimport adfsUserWizard from './credentials/AdfsUser';\r\nimport onDemandWizard from './credentials/OnDemand';\r\n// <<< Strategies wizards\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let promptFor: inquirer.Question[] = [];\r\n\r\n    // Ask for strategy specific parameters\r\n    promptFor = [];\r\n    switch (answersAll.strategy) {\r\n      case 'OnPremiseAddinCredentials':\r\n        resolve(onPremiseAddinWizard(authContext, answersAll));\r\n        break;\r\n      case 'OnpremiseUserCredentials':\r\n        resolve(onPremiseUserWizard(authContext, answersAll));\r\n        break;\r\n      case 'OnpremiseTmgCredentials':\r\n        resolve(onPremiseTmgWizard(authContext, answersAll));\r\n        break;\r\n      case 'OnpremiseFbaCredentials':\r\n        resolve(onPremiseFbaWizard(authContext, answersAll));\r\n        break;\r\n      case 'OnlineAddinCredentials':\r\n        resolve(onlineAddinWizard(authContext, answersAll));\r\n        break;\r\n      case 'UserCredentials':\r\n        resolve(onlineUserWizard(authContext, answersAll));\r\n        break;\r\n      case 'AdfsUserCredentials':\r\n        resolve(adfsUserWizard(authContext, answersAll));\r\n        break;\r\n      case 'OnDemandCredentials':\r\n        resolve(onDemandWizard(authContext, answersAll));\r\n        break;\r\n      default:\r\n        resolve(answersAll);\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default wizard;\r\n"]}