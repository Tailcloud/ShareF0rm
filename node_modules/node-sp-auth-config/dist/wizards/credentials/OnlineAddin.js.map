{"version":3,"sources":["wizards/credentials/OnlineAddin.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAqC;AAKrC,IAAM,MAAM,GAAG,UAAC,WAAyB,EAAE,UAAiC,EAAE,QAAkC;IAArE,2BAAA,EAAA,eAAiC;IAAE,yBAAA,EAAA,aAAkC;IAC9G,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAA+B,EAAE,MAA6B;QAChF,IAAI,sBAAsB,GAA6B,WAAW,CAAC,WAAuC,CAAC;QAC3G,IAAI,SAAS,GAAwB;YACnC;gBACE,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,UAAU;gBACnB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,sBAAsB,CAAC,QAAQ;gBACxC,QAAQ,EAAE,UAAC,MAAc;oBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;aACF,EAAE;gBACD,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,sBAAsB,CAAC,YAAY;gBAC5C,QAAQ,EAAE,UAAC,MAAc;oBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;aACF;SACF,CAAC;QACF,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;aACvB,IAAI,CAAC,UAAC,OAAyB;YAC9B,UAAU,gBACL,UAAU,EACV,OAAO,CACX,CAAC;YACF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"OnlineAddin.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IOnlineAddinCredentials } from 'node-sp-auth';\r\nimport { IAuthContext, IAuthConfigSettings } from '../../interfaces';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let onlineAddinCredentials: IOnlineAddinCredentials = (authContext.authOptions as IOnlineAddinCredentials);\r\n    let promptFor: inquirer.Question[] = [\r\n      {\r\n        name: 'clientId',\r\n        message: 'clientId',\r\n        type: 'input',\r\n        default: onlineAddinCredentials.clientId,\r\n        validate: (answer: string) => {\r\n          if (answer.length === 0) {\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n      }, {\r\n        name: 'clientSecret',\r\n        message: 'clientSecret',\r\n        type: 'input',\r\n        default: onlineAddinCredentials.clientSecret,\r\n        validate: (answer: string) => {\r\n          if (answer.length === 0) {\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    ];\r\n    inquirer.prompt(promptFor)\r\n      .then((answers: inquirer.Answers) => {\r\n        answersAll = {\r\n          ...answersAll,\r\n          ...answers\r\n        };\r\n        return resolve(answersAll);\r\n      });\r\n  });\r\n};\r\n\r\nexport default wizard;\r\n"]}