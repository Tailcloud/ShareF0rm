{"version":3,"sources":["wizards/credentials/OnDemand.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAqC;AAKrC,IAAM,MAAM,GAAG,UAAC,WAAyB,EAAE,UAAiC,EAAE,QAAkC;IAArE,2BAAA,EAAA,eAAiC;IAAE,yBAAA,EAAA,aAAkC;IAC9G,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAA+B,EAAE,MAA6B;QAChF,IAAI,sBAAsB,GAA0B,WAAW,CAAC,WAAoC,CAAC;QACrG,IAAI,SAAS,GAAwB,EAAE,CAAC;QACxC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;aACvB,IAAI,CAAC,UAAC,OAAyB;YAC9B,UAAU,gBACL,UAAU,EACV;gBACD,QAAQ,EAAE,IAAI;aACf,CACF,CAAC;YACF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"OnDemand.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IOnDemandCredentials } from 'node-sp-auth';\r\nimport { IAuthContext, IAuthConfigSettings } from '../../interfaces';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let onlineAddinCredentials: IOnDemandCredentials = (authContext.authOptions as IOnDemandCredentials);\r\n    let promptFor: inquirer.Question[] = [];\r\n    inquirer.prompt(promptFor)\r\n      .then((answers: inquirer.Answers) => {\r\n        answersAll = {\r\n          ...answersAll,\r\n          ...{\r\n            ondemand: true\r\n          }\r\n        };\r\n        return resolve(answersAll);\r\n      });\r\n  });\r\n};\r\n\r\nexport default wizard;\r\n"]}