{"version":3,"sources":["wizards/credentials/OnPremiseUser.ts"],"names":[],"mappings":"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","file":"OnPremiseUser.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IOnpremiseUserCredentials } from 'node-sp-auth';\r\nimport { IAuthContext, IAuthConfigSettings } from '../../interfaces';\r\nimport { defaultPasswordMask } from '../../utils';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let onPremiseUserCredentials: IOnpremiseUserCredentials = (authContext.authOptions as IOnpremiseUserCredentials);\r\n    let promptFor: inquirer.Question[] = [\r\n      {\r\n        name: 'username',\r\n        message: 'User name',\r\n        type: 'input',\r\n        default: onPremiseUserCredentials.username,\r\n        validate: (answer: string) => {\r\n          if (answer.length === 0) {\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    ];\r\n    inquirer.prompt(promptFor)\r\n      .then((answers: inquirer.Answers) => {\r\n        answersAll = {\r\n          ...answersAll,\r\n          ...answers\r\n        };\r\n        let noDomain = false;\r\n        if (answers.username.indexOf('@') !== -1) {\r\n          noDomain = true;\r\n        }\r\n        if (answers.username.indexOf('\\\\') !== -1) {\r\n          noDomain = true;\r\n          answers.username = answers.username.replace('\\\\\\\\', '\\\\');\r\n          answersAll.domain = answers.username.split('\\\\')[0];\r\n          answersAll.username = answers.username.split('\\\\')[1];\r\n        }\r\n        promptFor = [];\r\n        if (!noDomain) {\r\n          promptFor.push({\r\n            name: 'domain',\r\n            message: 'Domain',\r\n            type: 'input',\r\n            default: onPremiseUserCredentials.domain,\r\n            validate: (answer: string) => {\r\n              if (answer.length === 0) {\r\n                return false;\r\n              }\r\n              return true;\r\n            }\r\n          });\r\n        }\r\n        promptFor.push({\r\n          name: 'password',\r\n          message: 'Password',\r\n          type: 'password',\r\n          default: onPremiseUserCredentials.password ? defaultPasswordMask : null,\r\n          validate: (answer: string) => {\r\n            if (answer.length === 0) {\r\n              return false;\r\n            }\r\n            return true;\r\n          }\r\n        });\r\n        inquirer.prompt(promptFor)\r\n          // tslint:disable-next-line:no-shadowed-variable\r\n          .then((answers: inquirer.Answers) => {\r\n            answersAll = {\r\n              ...answersAll,\r\n              ...answers,\r\n              password: answers.password === defaultPasswordMask\r\n                ? onPremiseUserCredentials.password\r\n                : answers.password\r\n            };\r\n            resolve(answersAll);\r\n          });\r\n      });\r\n  });\r\n};\r\n\r\nexport default wizard;\r\n"]}