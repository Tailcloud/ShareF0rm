{"version":3,"sources":["wizards/chooseStrategy.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,mCAAqC;AAGrC,oCAA0C;AAE1C,IAAM,MAAM,GAAG,UAAC,WAAyB,EAAE,UAAiC,EAAE,QAAkC;IAArE,2BAAA,EAAA,eAAiC;IAAE,yBAAA,EAAA,aAAkC;IAC9G,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAA+B,EAAE,MAA6B;QAChF,IAAI,SAAS,GAAwB,EAAE,CAAC;QAGxC,IAAI,MAAM,GAA6B,CACrC,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAClE,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAClE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC;QAC3B,IAAI,UAAU,GAAwB,sBAAa,EAAE,CAAC,MAAM,CAAC,UAAC,QAA2B;YACvF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,SAAS,GAAG,CAAC;gBACX,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,yBAAyB;gBAClC,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,UAAC,QAA2B;oBAClD,MAAM,CAAC;wBACL,IAAI,EAAE,QAAQ,CAAC,IAAI;wBACnB,KAAK,EAAE,QAAQ,CAAC,EAAE;wBAClB,KAAK,EAAE,QAAQ,CAAC,IAAI;qBACrB,CAAC;gBACJ,CAAC,CAAC;gBACF,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,UAAC,QAAgB,EAAE,QAA2B,EAAE,KAAa;oBACtF,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;wBACzC,QAAQ,GAAG,KAAK,CAAC;oBACnB,CAAC;oBACD,MAAM,CAAC,QAAQ,CAAC;gBAClB,CAAC,EAAE,CAAC,CAAC;aACN,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;aACvB,IAAI,CAAC,UAAC,OAAyB;YAC9B,UAAU,gBACL,UAAU,EACV,OAAO,CACX,CAAC;YACF,OAAO,CAAC,UAAU,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"chooseStrategy.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IAuthContext, IAuthConfigSettings, IStrategyDictItem } from '../interfaces';\r\nimport { getStrategies } from '../config';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let promptFor: inquirer.Question[] = [];\r\n\r\n    // SharePoint Online/OnPremise autodetection\r\n    let target: ('Online' | 'OnPremise') = (\r\n      answersAll.siteUrl.toLowerCase().indexOf('.sharepoint.com') !== -1 ||\r\n      answersAll.siteUrl.toLowerCase().indexOf('.sharepoint.cn') !== -1\r\n    ) ? 'Online' : 'OnPremise';\r\n    let strategies: IStrategyDictItem[] = getStrategies().filter((strategy: IStrategyDictItem) => {\r\n      return strategy.target.indexOf(target) !== -1;\r\n    });\r\n\r\n    promptFor = [{\r\n      name: 'strategy',\r\n      message: 'Authentication strategy',\r\n      type: 'list',\r\n      choices: strategies.map((strategy: IStrategyDictItem) => {\r\n        return {\r\n          name: strategy.name,\r\n          value: strategy.id,\r\n          short: strategy.name\r\n        };\r\n      }),\r\n      default: strategies.reduce((position: number, strategy: IStrategyDictItem, index: number) => {\r\n        if (authContext.strategy === strategy.id) {\r\n          position = index;\r\n        }\r\n        return position;\r\n      }, 0)\r\n    }];\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    inquirer.prompt(promptFor)\r\n      .then((answers: inquirer.Answers) => {\r\n        answersAll = {\r\n          ...answersAll,\r\n          ...answers\r\n        };\r\n        resolve(answersAll);\r\n      });\r\n  });\r\n};\r\n\r\nexport default wizard;\r\n"]}