{"version":3,"sources":["utils/machineId.ts"],"names":[],"mappings":"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","file":"machineId.js","sourcesContent":["import { exec, execSync } from 'child_process';\r\nimport { hash } from './common';\r\n\r\nconst platforms = {\r\n  darwin: 'ioreg -rd1 -c IOPlatformExpertDevice',\r\n  ia32: '%windir%\\\\sysnative\\\\cmd.exe \\/c %windir%\\\\System32\\\\REG ' +\r\n  'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography ' +\r\n  '/v MachineGuid',\r\n  x64: '%windir%\\\\System32\\\\REG ' +\r\n  'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography ' +\r\n  '/v MachineGuid',\r\n  linux: 'cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || :'\r\n};\r\n\r\nconst expose = (machineRawInfo: string): string => {\r\n  switch (process.platform) {\r\n    case 'darwin':\r\n      return machineRawInfo\r\n        .split('IOPlatformUUID')[1]\r\n        .split('\\n')[0].replace(/\\=|\\s+|\\\"/ig, '')\r\n        .toLowerCase();\r\n    case 'win32':\r\n      return machineRawInfo\r\n        .toString()\r\n        .split('REG_SZ')[1]\r\n        .replace(/\\r+|\\n+|\\s+/ig, '')\r\n        .toLowerCase();\r\n    case 'linux':\r\n      return machineRawInfo\r\n        .toString()\r\n        .replace(/\\r+|\\n+|\\s+/ig, '')\r\n        .toLowerCase();\r\n    default:\r\n      throw new Error(`Unsupported platform: ${process.platform}`);\r\n  }\r\n};\r\n\r\nconst getExecCommand = (): string => {\r\n  let command: string;\r\n  if (process.platform === 'win32') {\r\n    let is32 = false;\r\n    try {\r\n      is32 = !!require('fs').statSync('C:\\\\windows\\\\sysnative');\r\n      // tslint:disable-next-line:no-empty\r\n    } catch (e) { }\r\n    command = platforms[is32 ? 'ia32' : 'x64'];\r\n  } else {\r\n    command = platforms[process.platform];\r\n  }\r\n  return command;\r\n};\r\n\r\nexport const machineIdSync = (original: boolean = true): string => {\r\n  let id: string = expose(execSync(getExecCommand()).toString());\r\n  return original ? id : hash(id);\r\n};\r\n\r\nexport const machineId = (original: boolean = true): Promise<string> => {\r\n  return new Promise((resolve: Function, reject: Function): Object => {\r\n    return exec(getExecCommand(), {}, (err: any, stdout: any, stderr: any) => {\r\n      if (err) {\r\n        return reject(\r\n          new Error(`Error while obtaining machine id: ${err.stack}`)\r\n        );\r\n      }\r\n      let id: string = expose(stdout.toString());\r\n      return resolve(original ? id : hash(id));\r\n    });\r\n  });\r\n};\r\n"]}