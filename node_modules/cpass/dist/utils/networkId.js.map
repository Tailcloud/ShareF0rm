{"version":3,"sources":["utils/networkId.ts"],"names":[],"mappings":";;AAAA,yBAAiD;AACjD,mCAAgC;AAEnB,QAAA,UAAU,GAAG,UAAC,QAAwB;IAAxB,yBAAA,EAAA,eAAwB;IACjD,IAAM,YAAY,GAAG,sBAAiB,EAAE,IAAI,EAAE,CAAC;IAC/C,IAAI,MAAM,GAAa,EAAE,CAAC;IAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;QACzC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,WAAW;YACtD,IAAI,IAAI,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,KAAK,mBAAmB,CAAC,CAAC,CAAC;gBACtF,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,aAAQ,EAAE,CAAC,CAAC;IAC1B,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,aAAI,CAAC,KAAK,CAAC,EAAX,CAAW,CAAC,CAAC;AAC9D,CAAC,CAAC;AAEW,QAAA,SAAS,GAAG,UAAC,QAAwB;IAAxB,yBAAA,EAAA,eAAwB;IAChD,IAAI,KAAK,GAAW,kBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,aAAI,CAAC,KAAK,CAAC,CAAC;AACxC,CAAC,CAAC","file":"networkId.js","sourcesContent":["import { networkInterfaces, hostname } from 'os';\r\nimport { hash } from './common';\r\n\r\nexport const networkIds = (original: boolean = true): string[] => {\r\n  const networkIntfs = networkInterfaces() || {};\r\n  let netIds: string[] = [];\r\n  Object.keys(networkIntfs).forEach(intfsProp => {\r\n    Object.keys(networkIntfs[intfsProp]).forEach(adapterProp => {\r\n      let iNet = networkIntfs[intfsProp][adapterProp];\r\n      if (iNet && iNet.address.length && !iNet.internal && iNet.mac !== '00:00:00:00:00:00') {\r\n        if (netIds.indexOf(iNet.mac) === -1) {\r\n          netIds.push(iNet.mac);\r\n        }\r\n      }\r\n    });\r\n  });\r\n  if (netIds.length === 0) {\r\n    netIds.push(hostname());\r\n  }\r\n  return original ? netIds : netIds.map(netId => hash(netId));\r\n};\r\n\r\nexport const networkId = (original: boolean = true): string => {\r\n  let netId: string = networkIds(original)[0];\r\n  return original ? netId : hash(netId);\r\n};\r\n"]}