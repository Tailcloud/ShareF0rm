{"version":3,"sources":["Cpass.ts"],"names":[],"mappings":";;AACA,yCAA2C;AAE3C,yCAAsC;AACtC,+CAAkD;AAClD,+CAA8C;AAE9C;IAKE,eAAa,SAAkB;QAC7B,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS,GAAG,aAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAEM,sBAAM,GAAb,UAAe,SAAiB;QAC9B,IAAI,OAAe,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1D,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAEM,sBAAM,GAAb,UAAe,OAAe;QAC5B,IAAI,SAAiB,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1D,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,IAAI,OAAO,CAAC;IAC9B,CAAC;IAEO,4BAAY,GAApB;QACE,IAAI,GAAW,CAAC;QAChB,IAAI,CAAC;YACH,GAAG,GAAG,yBAAa,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACZ,GAAG,GAAG,qBAAS,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAEH,YAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,sBAAK","file":"Cpass.js","sourcesContent":["import { createHash } from 'crypto';\r\nimport * as simple from 'simple-encryptor';\r\n\r\nimport { hash } from './utils/common';\r\nimport { machineIdSync } from './utils/machineId';\r\nimport { networkId } from './utils/networkId';\r\n\r\nexport class Cpass {\r\n\r\n  private machineId: string;\r\n  private encryptor: any;\r\n\r\n  constructor (masterKey?: string) {\r\n    if (typeof masterKey !== 'undefined' && masterKey !== null) {\r\n      this.machineId = hash(masterKey);\r\n    } else {\r\n      this.machineId = this.getMachineId();\r\n    }\r\n  }\r\n\r\n  public encode (unsecured: string): string {\r\n    let secured: string;\r\n    this.machineId = this.machineId || this.getMachineId();\r\n    this.encryptor = this.encryptor || simple(this.machineId);\r\n    secured = this.encryptor.encrypt(unsecured);\r\n    return secured;\r\n  }\r\n\r\n  public decode (secured: string): string {\r\n    let unsecured: string;\r\n    this.machineId = this.machineId || this.getMachineId();\r\n    this.encryptor = this.encryptor || simple(this.machineId);\r\n    unsecured = this.encryptor.decrypt(secured);\r\n    return unsecured || secured;\r\n  }\r\n\r\n  private getMachineId (): string {\r\n    let mId: string;\r\n    try {\r\n      mId = machineIdSync(false);\r\n    } catch (ex) {\r\n      mId = networkId(false);\r\n    }\r\n    return mId;\r\n  }\r\n\r\n}\r\n"]}