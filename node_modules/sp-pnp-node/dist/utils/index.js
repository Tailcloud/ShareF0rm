"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var Utils = (function () {
    function Utils() {
    }
    Utils.prototype.checkNestedProperties = function (object) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.forEach(function (arg) {
            if (!object || !object.hasOwnProperty(arg)) {
                return false;
            }
            object = object[arg];
        });
        return true;
    };
    Utils.prototype.getCaseInsensitiveProp = function (object, propertyName) {
        propertyName = propertyName.toLowerCase();
        return Object.keys(object).reduce(function (res, prop) {
            if (prop.toLowerCase() === propertyName) {
                res = object[prop];
            }
            return res;
        }, undefined);
    };
    Utils.prototype.isOnPrem = function (url) {
        return url.indexOf('.sharepoint.com') === -1 && url.indexOf('.sharepoint.cn') === -1;
    };
    Utils.prototype.isUrlHttps = function (url) {
        return url.split('://')[0].toLowerCase() === 'https';
    };
    Utils.prototype.isUrlAbsolute = function (url) {
        return url.indexOf('http:') === 0 || url.indexOf('https:') === 0;
    };
    Utils.prototype.combineUrl = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.join('/').replace(/(\/)+/g, '/').replace(':/', '://');
    };
    Utils.prototype.mergeHeaders = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.reduce(function (headers, headersPatch) {
            _this.anyToHeaders(headersPatch).forEach(function (value, name) {
                headers.set(name, value);
            });
            return headers;
        }, new node_fetch_1.Headers());
    };
    Utils.prototype.anyToHeaders = function (headers) {
        if (headers === void 0) { headers = {}; }
        return (new node_fetch_1.Request('', { headers: headers })).headers;
    };
    return Utils;
}());
exports.Utils = Utils;
