"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var spauth = require("node-sp-auth");
var nodeFetch = require("node-fetch");
var node_fetch_1 = require("node-fetch");
var https = require("https");
var path = require("path");
var cpass_1 = require("cpass");
var node_sp_auth_config_1 = require("node-sp-auth-config");
var utils_1 = require("./utils");
global.Headers = nodeFetch.Headers;
global.Request = nodeFetch.Request;
global.Response = nodeFetch.Response;
var PnpNode = (function () {
    function PnpNode(settings) {
        if (settings === void 0) { settings = {}; }
        var _this = this;
        this.fetch = function (url, options) {
            if (!_this.utils.isUrlAbsolute(url)) {
                url = _this.utils.combineUrl(_this.settings.siteUrl, url);
            }
            return spauth.getAuth(url, _this.settings.authOptions)
                .then(function (data) {
                var fetchOptions = __assign({}, options, data.options, { headers: _this.utils.mergeHeaders({
                        'Accept': 'application/json;odata=verbose',
                        'Content-Type': 'application/json;odata=verbose'
                    }, options.headers, data.headers) });
                if (_this.utils.isOnPrem(url) && _this.settings.envCode === '15') {
                    var disallowed = ['application/json'];
                    if (disallowed.indexOf(fetchOptions.headers.get('accept')) !== -1) {
                        fetchOptions.headers.set('accept', 'application/json;odata=verbose');
                    }
                }
                if (_this.utils.isUrlHttps(url) && !fetchOptions.agent) {
                    fetchOptions.agent = _this.agent;
                }
                return node_fetch_1.default(url, fetchOptions);
            });
        };
        this.init = function () { return _this.initAmbient(); };
        this.initAmbient = function () {
            global.fetch = _this.fetch;
            return new Promise(function (resolve, reject) {
                if (typeof _this.settings.authOptions === 'undefined') {
                    _this.spAuthConfigirator.getContext()
                        .then(function (context) {
                        _this.settings = __assign({}, _this.settings, context);
                        resolve(_this.settings);
                    })
                        .catch(function (error) {
                        reject(error);
                    });
                }
                else {
                    resolve(_this.settings);
                }
            });
        };
        var config = settings.config || {};
        this.settings = __assign({}, settings, { config: __assign({}, config, { configPath: path.resolve(config.configPath || path.join(process.cwd(), 'config/private.json')), encryptPassword: typeof config.encryptPassword !== 'undefined' ? config.encryptPassword : true, saveConfigOnDisk: typeof config.saveConfigOnDisk !== 'undefined' ? config.saveConfigOnDisk : true }), envCode: settings.envCode || '15' });
        if (typeof this.settings.authOptions !== 'undefined') {
            var cpass = new cpass_1.Cpass();
            this.settings.authOptions.password = this.settings.authOptions.password &&
                cpass.decode(this.settings.authOptions.password);
        }
        this.utils = new utils_1.Utils();
        this.spAuthConfigirator = new node_sp_auth_config_1.AuthConfig(this.settings.config);
        this.agent = new https.Agent({
            rejectUnauthorized: false,
            keepAlive: true,
            keepAliveMsecs: 10000
        });
    }
    return PnpNode;
}());
exports.PnpNode = PnpNode;
