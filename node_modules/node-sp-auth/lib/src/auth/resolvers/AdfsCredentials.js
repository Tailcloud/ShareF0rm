"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Promise = require("bluebird");
const request = require("request-promise");
const url = require("url");
const _ = require("lodash");
const fs = require("fs");
const path = require("path");
const cookie = require("cookie");
const util = require("util");
let xmldoc = require('xmldoc');
const Cache_1 = require("./../../utils/Cache");
const consts = require("./../../Consts");
const AdfsHelper_1 = require("./../../utils/AdfsHelper");
class AdfsCredentials {
    constructor(_siteUrl, _authOptions) {
        this._siteUrl = _siteUrl;
        this._authOptions = _.extend({}, _authOptions);
        this._authOptions.username = this._authOptions.username
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        this._authOptions.password = this._authOptions.password
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
        if (this._authOptions.domain !== undefined) {
            this._authOptions.username = `${this._authOptions.domain}\\${this._authOptions.username}`;
        }
    }
    getAuth() {
        let siteUrlParsed = url.parse(this._siteUrl);
        let cacheKey = util.format('%s@%s', siteUrlParsed.host, this._authOptions.username);
        let cachedCookie = AdfsCredentials.CookieCache.get(cacheKey);
        if (cachedCookie) {
            return Promise.resolve({
                headers: {
                    'Cookie': cachedCookie
                }
            });
        }
        return AdfsHelper_1.AdfsHelper.getSamlAssertion(this._siteUrl, this._authOptions)
            .then(data => {
            return this.postTokenData(data);
        })
            .then(data => {
            let adfsCookie = this._authOptions.adfsCookie || consts.FedAuth;
            let notAfter = new Date(data[0]).getTime();
            let expiresIn = parseInt(((notAfter - new Date().getTime()) / 1000).toString(), 10);
            let response = data[1];
            let authCookie = adfsCookie + '=' + cookie.parse(response.headers['set-cookie'][0])[adfsCookie];
            AdfsCredentials.CookieCache.set(cacheKey, authCookie, expiresIn);
            return {
                headers: {
                    'Cookie': authCookie
                }
            };
        });
    }
    postTokenData(samlAssertion) {
        let tokenPostTemplate = fs.readFileSync(path.join(__dirname, '..', '..', '..', 'templates', 'adfs_saml_token.tmpl'));
        let result = _.template(tokenPostTemplate.toString())({
            created: samlAssertion.notBefore,
            expires: samlAssertion.notAfter,
            relyingParty: this._authOptions.relyingParty,
            token: samlAssertion.value
        });
        let tokenXmlDoc = new xmldoc.XmlDocument(result);
        let siteUrlParsed = url.parse(this._siteUrl);
        let rootSiteUrl = `${siteUrlParsed.protocol}//${siteUrlParsed.host}`;
        return Promise.all([samlAssertion.notAfter, request.post(`${rootSiteUrl}/_trust/`, {
                form: {
                    'wa': 'wsignin1.0',
                    'wctx': `${rootSiteUrl}/_layouts/Authenticate.aspx?Source=%2F`,
                    'wresult': tokenXmlDoc.toString({ compressed: true })
                },
                resolveWithFullResponse: true,
                simple: false,
                strictSSL: false
            })]);
    }
}
AdfsCredentials.CookieCache = new Cache_1.Cache();
exports.AdfsCredentials = AdfsCredentials;
//# sourceMappingURL=AdfsCredentials.js.map